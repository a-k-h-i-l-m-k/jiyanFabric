openapi: 3.0.0
info:
  title: Jiyan Fabric API
  version: 1.0.0

servers:
  - url: http://localhost:5000

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully

  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful, returns access and refresh tokens

  /api/categories:
    post:
      tags:
        - Categories
      summary: Create a new category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Men's Wear
                parent:
                  type: string
                  format: uuid
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Category created successfully
        '400':
          description: Validation error
        '401':
          description: Unauthorized

    get:
      tags:
        - Categories
      summary: Get all categories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    parent:
                      type: string
                      nullable: true
                    image:
                      type: string
                      example: /uploads/categories/123.jpg
        '401':
          description: Unauthorized

  /api/categories/{id}:
    get:
      tags:
        - Categories
      summary: Get a single category by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category details
        '404':
          description: Category not found

    put:
      tags:
        - Categories
      summary: Update category by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                parent:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Category updated
        '400':
          description: Bad request
        '404':
          description: Category not found

    delete:
      tags:
        - Categories
      summary: Delete a category by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category deleted
        '404':
          description: Category not found
  /api/brands:
    post:
      tags:
        - Brands
      summary: Create a new brand
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - brandName
                - brandImg
              properties:
                brandName:
                  type: string
                  example: Nike
                brandImg:
                  type: string
                  format: binary
      responses:
        '201':
          description: Brand created successfully
        '400':
          description: Validation error
        '401':
          description: Unauthorized

    get:
      tags:
        - Brands
      summary: Get all brands
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of brands
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    brandName:
                      type: string
                    brandImg:
                      type: string
                      example: /uploads/brands/brand1.jpg
        '401':
          description: Unauthorized

  /api/brands/{id}:
    put:
      tags:
        - Brands
      summary: Update brand by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                brandName:
                  type: string
                brandImg:
                  type: string
                  format: binary
      responses:
        '200':
          description: Brand updated successfully
        '400':
          description: Bad request
        '404':
          description: Brand not found

    delete:
      tags:
        - Brands
      summary: Delete a brand by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Brand deleted successfully
        '404':
          description: Brand not found

  /api/banners:
    post:
      tags:
        - Banners
      summary: Create a new banner
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - bannerImg
                - showImg
              properties:
                bannerImg:
                  type: string
                  format: binary
                showImg:
                  type: boolean
                  example: true
      responses:
        '201':
          description: Banner created successfully
        '400':
          description: Validation error
        '401':
          description: Unauthorized

    get:
      tags:
        - Banners
      summary: Get all banners
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of banners
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    bannerImg:
                      type: string
                      example: /uploads/banners/banner1.jpg
                    showImg:
                      type: boolean
        '401':
          description: Unauthorized

  /api/banners/{id}:
    put:
      tags:
        - Banners
      summary: Update banner by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                bannerImg:
                  type: string
                  format: binary
                showImg:
                  type: boolean
                  example: false
      responses:
        '200':
          description: Banner updated successfully
        '400':
          description: Bad request
        '404':
          description: Banner not found

    delete:
      tags:
        - Banners
      summary: Delete a banner by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Banner deleted successfully
        '404':
          description: Banner not found
  
